// Copyright 2017 Istio Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package adapter

// Metric kinds supported by mixer.
const (
	Gauge        MetricKind = iota // records instantaneous (non-cumulative) measurements
	Counter                        // records increasing cumulative values
	Distribution                   // aggregates values in buckets (values still reported un-aggregated)
)

type (
	// MetricKind defines the set of known metrics types that can be generated by Mixer.
	MetricKind int

	// BucketDefinition provides a common interface for the various types
	// of bucket definitions.
	BucketDefinition interface{}

	// LinearBuckets describes a linear sequence of buckets that all have
	// the same width (except for underflow and overflow).
	//
	// There are `Count + 2` (= N) buckets. The two additional
	// buckets are the underflow and overflow buckets.
	//
	// Bucket `i` has the following boundaries:
	//    Upper bound (0 <= i < N-1):     offset + (width * i).
	//    Lower bound (1 <= i < N):       offset + (width * (i - 1)).
	LinearBuckets struct {
		BucketDefinition

		// Count is the number of buckets in this bucket definition.
		// Must be greater than 0.
		Count int32

		// Width describes the size of each individual bucket. Must be
		// greater than 0.
		Width float64

		// Offset is the lower bound of the first specified bucket.
		Offset float64
	}

	// ExponentialBuckets describes an exponential sequence of buckets that
	// have a width that is proportional to the value of the lower bound.
	//
	// There are `Count + 2` (= N) buckets. The two additional
	// buckets are the underflow and overflow buckets.
	//
	// Bucket `i` has the following boundaries:
	//    Upper bound (0 <= i < N-1):     scale * (growth_factor ^ i).
	//    Lower bound (1 <= i < N):       scale * (growth_factor ^ (i - 1)).
	ExponentialBuckets struct {
		BucketDefinition

		// Count is the number of buckets in this bucket definition.
		// Must be greater than 0.
		Count int32

		// GrowthFactor controls the rate of increase in size of the
		// buckets. Must be greater than 1.
		GrowthFactor float64

		// Scale controls the relative size of the buckets. Must be
		// greater than 0.
		Scale float64
	}

	// ExplicitBuckets specifies a set of buckets with arbitrary widths.
	//
	// There are `size(bounds) + 1` (= N) buckets. Bucket `i` has the following
	// boundaries:
	//
	//    Upper bound (0 <= i < N-1):     bounds[i]
	//    Lower bound (1 <= i < N);       bounds[i - 1]
	//
	// If `Bounds` has only one element, then there are no finite buckets,
	// and that single element is the common boundary of the overflow and
	// underflow buckets.
	ExplicitBuckets struct {
		BucketDefinition

		// Bounds describes the explicit bounds of the buckets being
		// defined. Must be at least 1 element long and have
		// monotonically increasing values.
		Bounds []float64
	}
)
